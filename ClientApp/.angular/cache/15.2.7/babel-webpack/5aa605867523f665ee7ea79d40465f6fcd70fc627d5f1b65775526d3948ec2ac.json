{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { environment } from '../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class StorageService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/storage`;\n  }\n  getFileList() {\n    return this.http.get(this.apiUrl);\n  }\n  uploadFile(file) {\n    const formData = new FormData();\n    formData.append('file', file, file.name);\n    return this.http.post(this.apiUrl, formData);\n  }\n  downloadFile(uuidFileName) {\n    return this.http.get(`${this.apiUrl}/${uuidFileName}`, {\n      responseType: 'blob',\n      observe: 'response'\n    }).pipe(map(response => {\n      // 從 Content-Disposition header 中提取檔案名稱\n      const contentDisposition = response.headers.get('Content-Disposition');\n      let filename = uuidFileName; // 預設使用 UUID\n      if (contentDisposition) {\n        const matches = contentDisposition.match(/filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/);\n        if (matches && matches[1]) {\n          filename = matches[1].replace(/['\"]/g, '');\n        }\n      }\n      // 創建下載連結\n      const blob = response.body;\n      this.downloadBlob(blob, filename);\n      return blob;\n    }));\n  }\n  downloadBlob(blob, filename) {\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    window.URL.revokeObjectURL(url);\n  }\n  deleteFile(fileName) {\n    return this.http.delete(`${this.apiUrl}/${fileName}`);\n  }\n}\nStorageService.ɵfac = function StorageService_Factory(t) {\n  return new (t || StorageService)(i0.ɵɵinject(i1.HttpClient));\n};\nStorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: StorageService,\n  factory: StorageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;AACpC,SAASC,WAAW,QAAQ,6BAA6B;;;AAKzD,OAAM,MAAOC,cAAc;EAIzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,GAAGH,WAAW,CAACI,MAAM,UAAU;EAER;EAExCC,WAAW;IACT,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAM,IAAI,CAACF,MAAM,CAAC;EACxC;EAEAG,UAAU,CAACC,IAAU;IACnB,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,EAAEA,IAAI,CAACI,IAAI,CAAC;IACxC,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAC,IAAI,CAACT,MAAM,EAAEK,QAAQ,CAAC;EAC9C;EAEAK,YAAY,CAACC,YAAoB;IAC/B,OAAO,IAAI,CAACZ,IAAI,CAACG,GAAG,CAAC,GAAG,IAAI,CAACF,MAAM,IAAIW,YAAY,EAAE,EAAE;MACrDC,YAAY,EAAE,MAAM;MACpBC,OAAO,EAAE;KACV,CAAC,CAACC,IAAI,CACLnB,GAAG,CAACoB,QAAQ,IAAG;MACb;MACA,MAAMC,kBAAkB,GAAGD,QAAQ,CAACE,OAAO,CAACf,GAAG,CAAC,qBAAqB,CAAC;MACtE,IAAIgB,QAAQ,GAAGP,YAAY,CAAC,CAAC;MAE7B,IAAIK,kBAAkB,EAAE;QACtB,MAAMG,OAAO,GAAGH,kBAAkB,CAACI,KAAK,CAAC,wCAAwC,CAAC;QAClF,IAAID,OAAO,IAAIA,OAAO,CAAC,CAAC,CAAC,EAAE;UACzBD,QAAQ,GAAGC,OAAO,CAAC,CAAC,CAAC,CAACE,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;;;MAI9C;MACA,MAAMC,IAAI,GAAGP,QAAQ,CAACQ,IAAY;MAClC,IAAI,CAACC,YAAY,CAACF,IAAI,EAAEJ,QAAQ,CAAC;MAEjC,OAAOI,IAAI;IACb,CAAC,CAAC,CACH;EACH;EAEQE,YAAY,CAACF,IAAU,EAAEJ,QAAgB;IAC/C,MAAMO,GAAG,GAAGC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACN,IAAI,CAAC;IAC5C,MAAMO,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxCF,IAAI,CAACG,IAAI,GAAGP,GAAG;IACfI,IAAI,CAACI,QAAQ,GAAGf,QAAQ;IACxBY,QAAQ,CAACP,IAAI,CAACW,WAAW,CAACL,IAAI,CAAC;IAC/BA,IAAI,CAACM,KAAK,EAAE;IACZL,QAAQ,CAACP,IAAI,CAACa,WAAW,CAACP,IAAI,CAAC;IAC/BH,MAAM,CAACC,GAAG,CAACU,eAAe,CAACZ,GAAG,CAAC;EACjC;EAEAa,UAAU,CAACC,QAAgB;IACzB,OAAO,IAAI,CAACxC,IAAI,CAACyC,MAAM,CAAC,GAAG,IAAI,CAACxC,MAAM,IAAIuC,QAAQ,EAAE,CAAC;EACvD;;AAvDW1C,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAA4C,SAAd5C,cAAc;EAAA6C,YAFb;AAAM","names":["map","environment","StorageService","constructor","http","apiUrl","getFileList","get","uploadFile","file","formData","FormData","append","name","post","downloadFile","uuidFileName","responseType","observe","pipe","response","contentDisposition","headers","filename","matches","match","replace","blob","body","downloadBlob","url","window","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","revokeObjectURL","deleteFile","fileName","delete","factory","providedIn"],"sourceRoot":"","sources":["/Users/delllin/Projects/GcpFileMove/ClientApp/src/app/storage.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n\n  private apiUrl = `${environment.apiUrl}/storage`;\n\n  constructor(private http: HttpClient) { }\n\n  getFileList(): Observable<any> {\n    return this.http.get<any>(this.apiUrl);\n  }\n\n  uploadFile(file: File): Observable<any> {\n    const formData = new FormData();\n    formData.append('file', file, file.name);\n    return this.http.post(this.apiUrl, formData);\n  }\n\n  downloadFile(uuidFileName: string): Observable<Blob> {\n    return this.http.get(`${this.apiUrl}/${uuidFileName}`, {\n      responseType: 'blob',\n      observe: 'response'\n    }).pipe(\n      map(response => {\n        // 從 Content-Disposition header 中提取檔案名稱\n        const contentDisposition = response.headers.get('Content-Disposition');\n        let filename = uuidFileName; // 預設使用 UUID\n        \n        if (contentDisposition) {\n          const matches = contentDisposition.match(/filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/);\n          if (matches && matches[1]) {\n            filename = matches[1].replace(/['\"]/g, '');\n          }\n        }\n        \n        // 創建下載連結\n        const blob = response.body as Blob;\n        this.downloadBlob(blob, filename);\n        \n        return blob;\n      })\n    );\n  }\n\n  private downloadBlob(blob: Blob, filename: string): void {\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    window.URL.revokeObjectURL(url);\n  }\n\n  deleteFile(fileName: string): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/${fileName}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}